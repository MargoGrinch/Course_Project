#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void function_Addition();
void function_Difference();
void function_Transpose();
void function_MultiplConst();
void function_Multiplication();


int main()
{
    int num_func, size;
    
    printf("введите размер матрицы\n");
    scanf("%i", &size);
    
    int **A_matrix = (int **)malloc(size*sizeof(int *));
    for(int i = 0; i < size; i++){
        A_matrix[i] = (int *)malloc(size*sizeof(int));
    }
    
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("A_matrix[%i][%i] = ", i, j);
            scanf("%i", &A_matrix[i][j]);
        }
    }
    
    int **B_matrix = (int **)malloc(size*sizeof(int *));
    for(int i = 0; i < size; i++){
        B_matrix[i] = (int *)malloc(size*sizeof(int));
    }
    
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("B_matrix[%i][%i] = ", i, j);
            scanf("%i", &B_matrix[i][j]);
        }
    }
    printf("Введіть номер функції, яку ви хочете реалізувати над матрицею(матрицями)\n");
    printf("1. Додавання\n2. Віднімання\n3. Транспонування\n4. Множення на число\n5. Множення між собою\n6. Ранг матриці\n");
    scanf("%i", &num_func);
    switch(num_func){
        case 1: function_Addition(A_matrix, B_matrix, size);break;
        case 2: function_Difference(A_matrix, B_matrix, size);break;
        case 3: function_Transpose(A_matrix, B_matrix, size);break;
        case 4: function_MultiplConst(A_matrix, B_matrix, size);break;
        case 5: function_Multiplication(A_matrix, B_matrix, size);break;
        case 6: function_rank(A_matrix, B_matrix, size);break;
        default: printf("Цифри тільки 1 - 6");
    }
    
    for(int i = 0; i < size; i++){
        free(A_matrix[i]);
    }
    free(A_matrix);
    
    for(int i = 0; i < size; i++){
        free(B_matrix[i]);
    }
    free(B_matrix);
    return 0;
}
//function_Addition
void function_Addition(int** A_matrix, int** B_matrix, int size){
    
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            A_matrix[i][j] += B_matrix[i][j];
        }
    }

    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", A_matrix[i][j]);
        }
        printf("\n");
    }
    
}
//function_Addition

//function_Difference
void function_Difference(int** A_matrix, int** B_matrix, int size){
    
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            A_matrix[i][j] -= B_matrix[i][j];
        }
    }

    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", A_matrix[i][j]);
        }
        printf("\n");
    }
    
}
//function_Difference

//function_Transpose
void function_Transpose(int** A_matrix, int** B_matrix, int size){
    
    printf("A_matrix\n");
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", A_matrix[j][i]);
        }
        printf("\n");
    }
    
    printf("B_matrix\n");
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", B_matrix[j][i]);
        }
        printf("\n");
    }
    
}
//function_Transpose

//function_MultiplConst
void function_MultiplConst(int** A_matrix, int** B_matrix, int size){
    
    int digit;
    printf("Число, на яке треба домножити\n");
    scanf("%i", &digit);
    
    printf("A_matrix\n");
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", digit * A_matrix[i][j]);
        }
        printf("\n");
    }
    printf("B_matrix\n");
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", digit * B_matrix[i][j]);
        }
        printf("\n");
    }
    
}
//function_MultiplConst

//function_Multiplication
void function_Multiplication(int** A_matrix, int** B_matrix, int size){
    
    int **mult_matrix = (int **)malloc(size*sizeof(int *));
    for(int i = 0; i < size; i++){
        mult_matrix[i] = (int *)malloc(size*sizeof(int));
    }
    
    int sum = 0;
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            for(int count = 0; count < size; count++){
                sum += A_matrix[i][count]*B_matrix[count][j];
            }
            mult_matrix[i][j] = sum;
            sum = 0;
        }
    }

    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            printf("%i ", mult_matrix[i][j]);
        }
        printf("\n");
    }
    
}
//function_Multiplication

//function_rank
void function_rank(int** A_matrix, int** B_matrix, int size){
    
    int count = 0;
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            A_matrix[i+1][j] = A_matrix[i][j] * A_matrix[count+1][count] - A_matrix[i+1][j] * A_matrix[count][count];
        }
        
    }
    
}
//function_rank
