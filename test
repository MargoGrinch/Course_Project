#include "result.h"
#include <SFML/Graphics.hpp>

using namespace sf;

Image heroimage;
Texture herotexture;
Sprite addition;
Sprite difference;
Sprite transpose;
Sprite multiplConst;
Sprite multiplication;
Sprite rank;
Image sizeimage;
Texture sizetexture;
Sprite two;
Sprite three;
Sprite four;
Sprite five;
Sprite six;
Sprite seven;
Image rectangular;
Texture rectangulartexture;
Sprite rectanA_1;
Sprite rectanA_2;
Sprite rectanA_3;
Sprite rectanA_4;
Sprite rectanB_1;
Sprite rectanB_2;
Sprite rectanB_3;
Sprite rectanB_4;

int** A_matrix;
int** B_matrix;
Text text;
Font font;

//functions
void initWindow();
void drawAll(RenderWindow& window);
void initial(int size);
void handling_2(int size, RenderWindow& window);
void destroy(int size);
void printNumber(int number, RenderWindow& window);
void deleteDigit(RenderWindow& window);

void function_Addition(int size);
void function_Difference(int size);
void function_Transpose(int size);
void function_MultiplConst(int size);
void function_Multiplication(int size);
//functions

void run(){

        RenderWindow window(sf::VideoMode(600, 520), "Matrix Calculator");
        initWindow();

        int size = 0;
        initial(size);
        while (window.isOpen())
        {
            Vector2i pos = Mouse::getPosition(window);       // получение координат при нажатии кнопок мышки
            int x = pos.x;
            int y = pos.y;

            Event event;
            while (window.pollEvent(event))
            {
                if (event.type == Event::Closed)
                {
                    destroy(size);
                    window.close();
                }
                if (event.type == Event::MouseButtonPressed){
                    if(event.key.code == Mouse::Left)
                    {
                        if(x > 50 && x < 133 && y > 50 && y < 75){
                            size = 2;
                            initial(size);
                            handling_2(size, window);
                        }
//                        if(x > 137 && x < 219 && y > 50 && y < 76){
//                            size = 3;
//                        }
//                        if(x > 222 && x < 306 && y > 50 && y < 76){
//                            size = 4;
//                        }
//                        if(x > 307 && x < 390 && y > 50 && y < 75){
//                            size = 5;
//                        }
//                        if(x > 392 && x < 477 && y > 50 && y < 75){
//                            size = 6;
//                        }
//                        if(x > 477 && x < 565 && y > 50 && y < 75){
//                            size = 7;
//                        }
                    }
                }


            }
//            if (sf::Mouse::isButtonPressed(sf::Mouse::Left)){

                //define function
//                if(x > 245 && x < 328 && y > 100 && y < 125){
//                    num_func = 1;
//                }

//                if(x > 245 && x < 328 && y > 130 && y < 159){
//                    num_func = 2;
//                }

//                if(x > 245 && x < 328 && y > 160 && y < 189){
//                    num_func = 3;
//                }

//                if(x > 245 && x < 328 && y > 193 && y < 222){
//                    num_func = 4;
//                }

//                if(x > 245 && x < 328 && y > 225 && y < 254){
//                    num_func = 5;
//                }
//                if(x > 245 && x < 328 && y > 257 && y < 285){
//                    num_func = 6;
//                }
                //define function

                //define size

                //define size

//            }
            window.clear(Color::White);
            drawAll(window);
        }

//        switch(num_func){
//            case 1: function_Addition(A_matrix, B_matrix, size);break;
//            case 2: function_Difference(A_matrix, B_matrix, size);break;
//            case 3: function_Transpose(A_matrix, B_matrix, size);break;
//            case 4: function_MultiplConst(A_matrix, B_matrix, size);break;
//            case 5: function_Multiplication(A_matrix, B_matrix, size);break;
//            case 6: function_Rank(A_matrix, B_matrix, size);break;
//            default: printf("Цифри тільки 1 - 6");
//        }
}

void initWindow(){
    font.loadFromFile("aBosaNova Bold.ttf");

    text.setFont(font);
    text.setCharacterSize(16);
    text.setColor(Color::Black);
    text.setStyle(Text::Italic);

    heroimage.loadFromFile("hero.png");

    herotexture.loadFromImage(heroimage);


    addition.setTexture(herotexture);
    addition.setTextureRect(IntRect(0,0,83,25));
    addition.setPosition(245, 100);

    difference.setTexture(herotexture);
    difference.setTextureRect(IntRect(0,27,83,29));
    difference.setPosition(245, 130);

    transpose.setTexture(herotexture);
    transpose.setTextureRect(IntRect(0,54,83,29));
    transpose.setPosition(245, 160);

    multiplConst.setTexture(herotexture);
    multiplConst.setTextureRect(IntRect(0,85,83,29));
    multiplConst.setPosition(245, 193);

    multiplication.setTexture(herotexture);
    multiplication.setTextureRect(IntRect(0,115,83,29));
    multiplication.setPosition(245, 225);

    rank.setTexture(herotexture);
    rank.setTextureRect(IntRect(0,145,83,28));
    rank.setPosition(245, 257);

    sizeimage.loadFromFile("size.png");

    sizetexture.loadFromImage(sizeimage);

    two.setTexture(sizetexture);
    two.setTextureRect(IntRect(0,0,83,25));
    two.setPosition(50, 50);

    three.setTexture(sizetexture);
    three.setTextureRect(IntRect(87,0,82,26));
    three.setPosition(137, 50);

    four.setTexture(sizetexture);
    four.setTextureRect(IntRect(171,0,84,26));
    four.setPosition(222, 50);

    five.setTexture(sizetexture);
    five.setTextureRect(IntRect(257,0,83,25));
    five.setPosition(307, 50);

    six.setTexture(sizetexture);
    six.setTextureRect(IntRect(341,0,85,25));
    six.setPosition(392, 50);

    seven.setTexture(sizetexture);
    seven.setTextureRect(IntRect(425,0,87,25));
    seven.setPosition(477, 50);

    rectangular.loadFromFile("rectangular.png");

    rectangulartexture.loadFromImage(rectangular);

    rectanA_1.setTexture(rectangulartexture);
    rectanA_1.setTextureRect(IntRect(0,0,64,64));
    rectanA_1.setPosition(61, 138);

    rectanA_2.setTexture(rectangulartexture);
    rectanA_2.setTextureRect(IntRect(0,0,64,64));
    rectanA_2.setPosition(134, 138);

    rectanA_3.setTexture(rectangulartexture);
    rectanA_3.setTextureRect(IntRect(0,0,64,64));
    rectanA_3.setPosition(61, 182);

    rectanA_4.setTexture(rectangulartexture);
    rectanA_4.setTextureRect(IntRect(0,0,64,64));
    rectanA_4.setPosition(134, 182);

    rectanB_1.setTexture(rectangulartexture);
    rectanB_1.setTextureRect(IntRect(0,0,64,64));
    rectanB_1.setPosition(380, 138);

    rectanB_2.setTexture(rectangulartexture);
    rectanB_2.setTextureRect(IntRect(0,0,64,64));
    rectanB_2.setPosition(453, 138);

    rectanB_3.setTexture(rectangulartexture);
    rectanB_3.setTextureRect(IntRect(0,0,64,64));
    rectanB_3.setPosition(380, 182);

    rectanB_4.setTexture(rectangulartexture);
    rectanB_4.setTextureRect(IntRect(0,0,64,64));
    rectanB_4.setPosition(453, 182);
}

void drawAll(RenderWindow& window){
    window.draw(addition);
    window.draw(difference);
    window.draw(transpose);
    window.draw(multiplConst);
    window.draw(multiplication);
    window.draw(rank);
    window.draw(two);
    window.draw(three);
    window.draw(four);
    window.draw(five);
    window.draw(six);
    window.draw(seven);
    window.draw(rectanA_1);
    window.draw(rectanA_2);
    window.draw(rectanA_3);
    window.draw(rectanA_4);
    window.draw(rectanB_1);
    window.draw(rectanB_2);
    window.draw(rectanB_3);
    window.draw(rectanB_4);
    window.display();
}

void destroy(int size){
    for(int i = 0; i < size; i++){
        free(A_matrix[i]);
    }
    free(A_matrix);

    for(int i = 0; i < size; i++){
        free(B_matrix[i]);
    }
    free(B_matrix);

}
void initial(int size){
    destroy(size);
    A_matrix = (int**)malloc(size*sizeof(int*));
    for(int i = 0; i < size; i++){
        A_matrix[i] = (int *)malloc(size*sizeof(int));
    }
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
                A_matrix[i][j] = 0;
        }
    }
    B_matrix = (int**)malloc(size*sizeof(int*));
    for(int i = 0; i < size; i++){
        B_matrix[i] = (int*)malloc(size*sizeof(int));
    }
    for(int i = 0; i < size; i++){
        for(int j = 0; j < size; j++){
            B_matrix[i][j] = 0;
        }
    }
    printf("start  size = %i\n", size);
}
void handling_2(int size, RenderWindow& window){
    while (1) {
        Vector2i pos = Mouse::getPosition(window);       // получение координат при нажатии кнопок мышки
        int x = pos.x;
        int y = pos.y;
        Event event;
        while (window.pollEvent(event))
        {
            if(event.type == Event::Closed)
            {
                destroy(size);
                window.close();
            }
            if(event.type == Event::MouseButtonPressed && event.key.code == Mouse::Left &&
                    x >= 61 && x <= 152 && y >= 138 && y <= 182 ){
                Event numberEvent;
                printNumber(0, window);
                while (1) {
                    window.pollEvent(numberEvent);
                    Vector2i pos1 = Mouse::getPosition(window);
                    int x1 = pos1.x;
                    int y1 = pos1.y;
                    if(numberEvent.type == Event::MouseButtonPressed && numberEvent.key.code == Mouse::Left
                            && (x1 < 61 || x1 > 152 || y1 < 138 || y1 > 182)){
                        printf("numberEvent\n");
                        break;
                    }
                    if(numberEvent.type == Event::KeyPressed){
                        if(numberEvent.key.code == Keyboard::Num1 || numberEvent.key.code == Keyboard::Numpad1)
                        {
                            printNumber(1, window);
                        } else if(numberEvent.key.code == Keyboard::Num2 || numberEvent.key.code == Keyboard::Numpad2)
                        {
                            printNumber(2, window);
                        } else if(numberEvent.key.code == Keyboard::Num3 || numberEvent.key.code == Keyboard::Numpad3)
                        {
                            printNumber(3, window);
                        } else if(numberEvent.key.code == Keyboard::Num4 || numberEvent.key.code == Keyboard::Numpad4)
                        {
                            printNumber(4, window);
                        } else if(numberEvent.key.code == Keyboard::Num5 || numberEvent.key.code == Keyboard::Numpad5)
                        {
                            printNumber(5, window);
                        } else if(numberEvent.key.code == Keyboard::Num6 || numberEvent.key.code == Keyboard::Numpad6)
                        {
                            printNumber(6, window);
                        } else if(numberEvent.key.code == Keyboard::Num7 || numberEvent.key.code == Keyboard::Numpad7)
                        {
                            printNumber(7, window);
                        } else if(numberEvent.key.code == Keyboard::Num8 || numberEvent.key.code == Keyboard::Numpad8)
                        {
                            printNumber(8, window);
                        } else if(numberEvent.key.code == Keyboard::Num9 || numberEvent.key.code == Keyboard::Numpad9)
                        {
                            printNumber(9, window);
                        } else if(numberEvent.key.code == Keyboard::Num0 || numberEvent.key.code == Keyboard::Numpad0)
                        {
                            printNumber(0, window);
                        } else if(numberEvent.key.code == Keyboard::BackSpace)
                        {
                            deleteDigit(window);
                        }
                    }
                }
            }
//            if(event.type == Event::MouseButtonPressed && event.key.code == Mouse::Left &&
//                    x >= 134 && x <= 198 && y >= 138 && y <= 202 ){
//                Event numberEvent;
//                printNumber(0, window);
//                while (1) {
//                    window.pollEvent(numberEvent);
//                    Vector2i pos1 = Mouse::getPosition(window);
//                    int x1 = pos1.x;
//                    int y1 = pos1.y;
//                    if(numberEvent.type == Event::MouseButtonPressed && numberEvent.key.code == Mouse::Left
//                            && (x1 < 61 || x1 > 152 || y1 < 138 || y1 > 182)){
//                        printf("numberEvent\n");
//                        break;
//                    }
//                    if(numberEvent.type == Event::KeyPressed){
//                        if(numberEvent.key.code == Keyboard::Num1 || numberEvent.key.code == Keyboard::Numpad1)
//                        {
//                            printNumber(1, window);
//                        } else if(numberEvent.key.code == Keyboard::Num2 || numberEvent.key.code == Keyboard::Numpad2)
//                        {
//                            printNumber(2, window);
//                        } else if(numberEvent.key.code == Keyboard::Num3 || numberEvent.key.code == Keyboard::Numpad3)
//                        {
//                            printNumber(3, window);
//                        } else if(numberEvent.key.code == Keyboard::Num4 || numberEvent.key.code == Keyboard::Numpad4)
//                        {
//                            printNumber(4, window);
//                        } else if(numberEvent.key.code == Keyboard::Num5 || numberEvent.key.code == Keyboard::Numpad5)
//                        {
//                            printNumber(5, window);
//                        } else if(numberEvent.key.code == Keyboard::Num6 || numberEvent.key.code == Keyboard::Numpad6)
//                        {
//                            printNumber(6, window);
//                        } else if(numberEvent.key.code == Keyboard::Num7 || numberEvent.key.code == Keyboard::Numpad7)
//                        {
//                            printNumber(7, window);
//                        } else if(numberEvent.key.code == Keyboard::Num8 || numberEvent.key.code == Keyboard::Numpad8)
//                        {
//                            printNumber(8, window);
//                        } else if(numberEvent.key.code == Keyboard::Num9 || numberEvent.key.code == Keyboard::Numpad9)
//                        {
//                            printNumber(9, window);
//                        } else if(numberEvent.key.code == Keyboard::Num0 || numberEvent.key.code == Keyboard::Numpad0)
//                        {
//                            printNumber(0, window);
//                        } else if(numberEvent.key.code == Keyboard::BackSpace)
//                        {
//                            deleteDigit(window);
//                        }
//                    }
//                }
//            }
//            if(event.type == Event::MouseButtonPressed && event.key.code == Mouse::Left &&
//                    x >= 61 && x <= 125 && y >= 182 && y <= 246 ){

//            }
//            if(event.type == Event::MouseButtonPressed && event.key.code == Mouse::Left &&
//                    x >= 134 && x <= 198 && y >= 182 && y <= 246 ){

//            }
        }
    }
}
void printNumber(int number, RenderWindow& window){
    window.clear(Color::White);
    A_matrix[0][0] = A_matrix[0][0]*10 + number;
    text.setString(std::to_string(A_matrix[0][0]));
    text.setPosition(63,153);
    window.draw(text);
    drawAll(window);
}
void deleteDigit(RenderWindow& window){
    window.clear(Color::White);
    A_matrix[0][0] /= 10;
    text.setString(std::to_string(A_matrix[0][0]));
    text.setPosition(63,153);
    window.draw(text);
    drawAll(window);
}

void printNumber2(int number, RenderWindow& window){
    window.clear(Color::White);
    A_matrix[0][1] = A_matrix[0][1]*10 + number;
    text.setString(std::to_string(A_matrix[0][1]));
    text.setPosition(136,153);
    window.draw(text);
    drawAll(window);
}
void deleteDigit2(RenderWindow& window){
    window.clear(Color::White);
    A_matrix[0][1] /= 10;
    text.setString(std::to_string(A_matrix[0][1]));
    text.setPosition(136,153);
    window.draw(text);
    drawAll(window);
}
